[ PSEUDOKOD ]
div(a[out], b[in], p[inout])
    p := 0
    if b != 0:
        temp := 1;
        while a >= b:
            b *= 2;
            temp *= 2;
        end

        while temp > 0:
            IF b < a_copy
                p += temp;
                a -= b;
            b /= 2;
            temp /= 2;
        end
    endif
return

[ Kod trÃ³jadresowy ]
GET a
GET b
p := 0
IF b == 0 GOTO E_ENDPROGRAM

temp := 1
IF a < b GOTO E_ENDWHILE1


PUT p [ E_ENDPROGRAM ]

Kod z etykietami i zmiennymi :
[ Pamiec:
 0 | zajety na dzialania
 1 | nieuzywane lol
 2 | a
 3 | b
 4 | p
 5 | a_copy
 6 | b_copy
 7 | temp
 Etykiety: E_WHILE_BODY, E_INNER_WHILE_BODY, E_INNER_ENDWHILE, E_ENDWHILE ]

GET a [ Wczytanie zmiennych ]
GET b
LOAD a [ a_copy := a ]
STORE a_copy
SET 0 [ p := 0 ]
STORE p
LOAD b [ IF b == 0 GOTO E_ENDWHILE ] [ IF a_copy < b GOTO E_ENDWHILE ]
JZERO E_ENDWHILE
SUB a_copy
JPOS E_ENDWHILE
SET 1 [ temp := 1 ] [ E_WHILE_BODY ]
STORE temp
LOAD b [ b_copy := b ]
STORE b_copy
SUB a_copy
JPOS E_INNER_ENDWHILE [ IF b_copy - a_copy > 0 GOTO E_INNER_ENDWHILE ]
LOAD temp [ temp *= 2 ] [ E_INNER_WHILE_BODY ]
ADD 0
STORE temp
LOAD b_copy [ b_copy *= 2 ]
ADD 0
STORE b_copy
SUB a_copy [ IF b_copy - a_copy = 0 GOTO E_INNER_WHILE_BODY ]
JZERO E_INNER_WHILE_BODY
LOAD b_copy [ b_copy /= 2 ] [ E_INNER_ENDWHILE ]
HALF
STORE b_copy
LOAD temp [ temp /= 2 ] [ p := p + temp ]
HALF
STORE temp
ADD p
STORE p
LOAD a_copy [ a_copy := a_copy - b_copy ]
SUB b_copy
STORE a_copy
LOAD b [ IF a_copy >= b GOTO E_WHILE_BODY ]
SUB a_copy
JZERO E_WHILE_BODY
PUT p [E_ENDWHILE ]
HALT



